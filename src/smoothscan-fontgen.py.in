#! /usr/bin/env @FONTFORGE_PYTHON_VERSION@

#  This file is part of smoothscan.
#
#  smoothscan is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
#  by the Free Software Foundation, either version 3 of the License,
#  or (at your option) any later version.
#
#  smoothscan is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with smoothscan. If not, see <http://www.gnu.org/licenses/>.


# Fontforge has a c library interface, but there are no docs for it,
# and even the author recommends using the python interface instead of
# the C library interface.

import fontforge
import psMat
import glob
import os
import sys
import subprocess

def removePrefix(text, prefix):
    return text[len(prefix):] if text.startswith(prefix) else text

def removePostfix(text, postfix):
    return text[:len(text)-len(postfix)]

ffVersion = fontforge.version()
print ("Using Fontforge version: " + ffVersion)

if (len(sys.argv) != 6):
    print ("Usage: fontgen.py fontdir outname latticeh latticew fontnum")
    exit (1)

fontdir = sys.argv[1]
outname = sys.argv[2]
latticeh = int(sys.argv[3])
latticew = int(sys.argv[4])
fontnum = int(sys.argv[5])
# command line args

print ("Scaling to x: " + str(latticeh) + " y: " + str(latticeh))
print ("Converting " + fontdir  + "/*.png to " + outname)


newFont = fontforge.font() 
newFont.encoding = "koi8-r"

scaley = latticeh/100.0
matrix = psMat.scale(scaley, scaley)

newFont.layers[0].is_quadratic = True;
vecNames = []

for f in glob.glob(fontdir + "/*.png"):
    vecNames.append(f)

vecNames.sort()

for f in vecNames:

    cp = int(removePostfix(removePrefix(f, fontdir+"/"), ".png"))
    newFont.createMappedChar(cp)
    currGlyph = newFont[cp]
    currGlyph.importOutlines(f)
    # fontforge's autoTrace will invoke either autotrace or potrace
    # depending on what is installed on the system. In general,
    # potrace gives better results. This tracing step should probably
    # be moved into the c component, using libpotrace.
    currGlyph.autoTrace()
    currGlyph.width = latticew
    currGlyph.transform(matrix)
    currGlyph.simplify()

    # If fontforge sees a nearly blank character, it won't ouput it,
    # which will cause errors in the resulting pdf. Setting the width
    # manually should fix this, but this check is in here to make
    # sure.
    if (not currGlyph.isWorthOutputting()):
        print (f + " not worth outputting, failed to render character")
    

# Not sure about this part. Fontforge was complaining about invalid
# cvt and prep tables, during autoInstr in the first loop, so we just
# clear them, and autoInstr in a separate loop.
newFont.setTableData('cvt', None)
newFont.setTableData('prep', None)

for currGlyph in newFont.glyphs():  
    currGlyph.autoInstr()

fn = "SmoothScans" + str(fontnum)
newFont.fontname = fn
newFont.fullname = fn
newFont.familyname = fn
newFont.comment = "Generated by smoothscan"
# By default, fontforge includes the username in the copyright. We
# want to respect our user's privacy, so we clear it for them.
newFont.copyright = ""

newFont.generate(outname)

